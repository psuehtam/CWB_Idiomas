###########################################################################################

COME√áAR A PROGRAMAR

==========================================================================================

1Ô∏è‚É£ Atualizar sua develop local com o que seus amigos j√° fizeram

Primeiro, v√° para a branch develop:

        git checkout develop

Agora puxe as altera√ß√µes do GitHub:

        git pull origin develop

‚úÖ Agora sua develop local est√° atualizada com tudo que seus amigos fizeram.
üí° Dica importantes
Sempre fa√ßa git pull antes de come√ßar a mexer para evitar conflitos grandes.

==========================================================================================

2Ô∏è‚É£ Criar uma nova feature para suas tarefas

        git flow feature start tarefa-exemplo

Isso cria e muda para a branch feature/tarefa-exemplo.

Sempre crie suas features a partir de uma develop atualizada.

==========================================================================================

3Ô∏è‚É£ Trabalhar na feature

Fa√ßa suas altera√ß√µes nos arquivos.

Quando quiser salvar progresso local:

        git add .
        git commit -m "Fiz Tal Coisa"

Pode fazer v√°rios commits enquanto trabalha na feature.
üí° Dica importantes
Fa√ßa commits pequenos e frequentes.

==========================================================================================

4Ô∏è‚É£ Publicar a feature para que outros vejam ou colaborem

        git flow feature publish tarefa-exemplo

Isso envia sua branch feature/tarefa-exemplo para o GitHub.

‚úÖSeus amigos agora podem puxar sua feature se precisarem trabalhar nela tamb√©m.

==========================================================================================

5Ô∏è‚É£ Finalizar a feature e unir na develop

Quando terminar todas as mudan√ßas:

Certifique-se que a develop est√° atualizada:

        git checkout develop
        git pull origin develop

Volte para sua feature:

        git checkout feature/tarefa-exemplo

Sincronize sua feature com a develop (merge):

        git merge develop

Resolva conflitos, se houver, e fa√ßa commit se precisar.

Agora v√° at√© o GitHub e crie um Pull Request:
Compare develop ‚Üê feature/tarefa-exemplo

‚úÖAgora todo mundo j√° consegue pegar suas altera√ß√µes.
==========================================================================================

6Ô∏è‚É£ Subir a develop atualizada para o GitHub

        git push origin develop



###########################################################################################

Como seus amigos pegam o que voc√™ fez

==========================================================================================

No computador deles:

        git checkout develop
        git pull origin develop

###########################################################################################

CASO PROGRAME DENTRO DE UMA DEVELOP SEM QUERER

==========================================================================================

1Ô∏è‚É£Criar a feature branch a partir da develop atual

        git checkout -b feature/nome-da-feature

Isso cria uma branch nova chamada feature/nome-da-feature com todas as altera√ß√µes que voc√™ j√° fez na develop.
Agora voc√™ est√° na feature branch.

==========================================================================================

2Ô∏è‚É£ Commitar suas altera√ß√µes na feature

        git add .
        git commit -m "Minhas altera√ß√µes que estavam na develop"

Agora suas altera√ß√µes est√£o salvas na feature branch.

==========================================================================================

3Ô∏è‚É£ Voltar para a develop e descartar as altera√ß√µes de l√°

Se voc√™ quiser limpar a develop, volte para ela e descarte o que estava l√°:

        git checkout develop
        git reset --hard origin/develop

git reset --hard origin/develop faz a develop local ficar exatamente igual √† develop do GitHub, sem suas altera√ß√µes que agora est√£o na feature.

==========================================================================================

4Ô∏è‚É£ Continuar trabalhando na feature

Agora voc√™ pode trabalhar normalmente na feature:

        git checkout feature/nome-da-feature

Commit frequente:

        git add .
        git commit -m "Outra melhoria na feature"

Publicar para o GitHub (se quiser):

        git flow feature publish nome-da-feature

==========================================================================================

5Ô∏è‚É£ Finalizar a feature e unir na develop (quando terminar)

Certifique-se que a develop est√° atualizada:

        git checkout develop
        git pull origin develop

Volte para a feature:

        git checkout feature/nome-da-feature

Sincronize com a develop:

        git merge develop

Finalize a feature:

        git flow feature finish nome-da-feature

Suba a develop atualizada para o GitHub:

        git push origin develop

###########################################################################################

CASO PROGRAME DIRETO NA DEVELOP (E QUEIRA ENVIAR PRA DEVELOP MESMO)

==========================================================================================

1Ô∏è‚É£ Garantir que sua develop local est√° atualizada

Antes de come√ßar ou enviar qualquer coisa, garanta que voc√™ tem a vers√£o mais recente:

        git checkout develop

        git pull origin develop

‚úÖ Isso evita conflitos com o que j√° foi enviado por outras pessoas.

==========================================================================================

2Ô∏è‚É£ Verificar e commitar suas altera√ß√µes

Confirme que est√° na branch develop e veja se h√° arquivos modificados:

        git status

Se tiver arquivos alterados, adicione e fa√ßa o commit:

        git add .
        git commit -m "Descri√ß√£o do que foi alterado"


üí° Dica importante: fa√ßa commits claros e descritivos

==========================================================================================

3Ô∏è‚É£ Atualizar novamente antes de enviar (para evitar conflitos)

Antes de subir suas altera√ß√µes, √© sempre bom garantir que ningu√©m enviou algo novo enquanto voc√™ estava programando:

        git pull origin develop

Se aparecerem conflitos, resolva-os, fa√ßa novo commit se necess√°rio.

==========================================================================================

4Ô∏è‚É£ Enviar suas altera√ß√µes para o GitHub

Quando estiver tudo certo:

        git push origin develop

‚úÖ Suas mudan√ßas agora est√£o na develop do GitHub.